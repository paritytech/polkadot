[package]
name = "polkadot-service"
version = "0.9.30"
authors = ["Parity Technologies <admin@parity.io>"]
edition = "2021"
rust-version = "1.60"

[dependencies]
# Substrate Client
sc-authority-discovery = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
babe = { package = "sc-consensus-babe", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
beefy-primitives = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
beefy-gadget = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
frame-support = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
grandpa = { package = "sc-finality-grandpa", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-block-builder = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-chain-spec = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-client-api = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-client-db = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-consensus = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-consensus-slots = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-executor = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-network = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-network-common = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-transaction-pool = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-sync-state-rpc = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-keystore = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-basic-authorship = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-offchain = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sc-sysinfo = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
service = { package = "sc-service", git = "https://github.com/paritytech/substrate", default-features = false , branch = "coderobe/revertrevert" }
telemetry = { package = "sc-telemetry", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }

# Substrate Primitives
sp-authority-discovery = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
consensus_common = { package = "sp-consensus", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
grandpa_primitives = { package = "sp-finality-grandpa", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
inherents = { package = "sp-inherents", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-api = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-block-builder = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-blockchain = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-core = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-io = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-keystore = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-offchain = { package = "sp-offchain", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-runtime = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-session = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-storage = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-transaction-pool = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-trie = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-timestamp = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-consensus-babe = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
sp-state-machine = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }

# Substrate Pallets
pallet-babe = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
pallet-im-online = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
pallet-staking = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
pallet-transaction-payment-rpc-runtime-api = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }

# Substrate Other
frame-system-rpc-runtime-api = { git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }
prometheus-endpoint = { package = "substrate-prometheus-endpoint", git = "https://github.com/paritytech/substrate", branch = "coderobe/revertrevert" }

# External Crates
futures = "0.3.21"
hex-literal = "0.3.4"
gum = { package = "tracing-gum", path = "../gum/" }
serde = { version = "1.0.137", features = ["derive"] }
serde_json = "1.0.81"
thiserror = "1.0.31"
kvdb = "0.11.0"
kvdb-rocksdb = { version = "0.15.2", optional = true }
parity-db = { version = "0.3.16", optional = true }
async-trait = "0.1.57"
lru = "0.7"

# Polkadot
polkadot-node-core-parachains-inherent = { path = "../core/parachains-inherent" }
polkadot-overseer = { path = "../overseer" }
polkadot-client = { path = "../client", default-features = false, optional = true }
polkadot-parachain = { path = "../../parachain" }
polkadot-primitives = { path = "../../primitives" }
polkadot-node-primitives = { path = "../primitives" }
polkadot-rpc = { path = "../../rpc" }
polkadot-node-subsystem = {path = "../subsystem" }
polkadot-node-subsystem-util = { path = "../subsystem-util" }
polkadot-node-subsystem-types = { path = "../subsystem-types" }
polkadot-runtime-parachains = { path = "../../runtime/parachains" }
polkadot-node-network-protocol = { path = "../network/protocol" }

# Polkadot Runtime Constants
polkadot-runtime-constants = { path = "../../runtime/polkadot/constants", optional = true }
kusama-runtime-constants = { path = "../../runtime/kusama/constants", optional = true }
rococo-runtime-constants = { path = "../../runtime/rococo/constants", optional = true }
westend-runtime-constants = { path = "../../runtime/westend/constants", optional = true }

# Polkadot Runtimes
polkadot-runtime = { path = "../../runtime/polkadot", optional = true }
kusama-runtime = { path = "../../runtime/kusama", optional = true }
westend-runtime = { path = "../../runtime/westend", optional = true }
rococo-runtime = { path = "../../runtime/rococo", optional = true }

# Polkadot Subsystems
polkadot-approval-distribution = { path = "../network/approval-distribution", optional = true }
polkadot-availability-bitfield-distribution = { path = "../network/bitfield-distribution", optional = true }
polkadot-availability-distribution = { path = "../network/availability-distribution", optional = true }
polkadot-availability-recovery = { path = "../network/availability-recovery", optional = true }
polkadot-collator-protocol = { path = "../network/collator-protocol", optional = true }
polkadot-dispute-distribution = { path = "../network/dispute-distribution", optional = true }
polkadot-gossip-support = { path = "../network/gossip-support", optional = true }
polkadot-network-bridge = { path = "../network/bridge", optional = true }
polkadot-node-collation-generation = { path = "../collation-generation", optional = true }
polkadot-node-core-approval-voting = { path = "../core/approval-voting", optional = true }
polkadot-node-core-av-store = { path = "../core/av-store", optional = true }
polkadot-node-core-backing = { path = "../core/backing", optional = true }
polkadot-node-core-bitfield-signing = { path = "../core/bitfield-signing", optional = true }
polkadot-node-core-candidate-validation = { path = "../core/candidate-validation", optional = true }
polkadot-node-core-chain-api = { path = "../core/chain-api", optional = true }
polkadot-node-core-chain-selection = { path = "../core/chain-selection", optional = true }
polkadot-node-core-dispute-coordinator = { path = "../core/dispute-coordinator", optional = true }
polkadot-node-core-provisioner = { path = "../core/provisioner", optional = true }
polkadot-node-core-pvf-checker = { path = "../core/pvf-checker", optional = true }
polkadot-node-core-runtime-api = { path = "../core/runtime-api", optional = true }
polkadot-statement-distribution = { path = "../network/statement-distribution", optional = true }

[dev-dependencies]
polkadot-test-client = { path = "../test/client" }
polkadot-node-subsystem-test-helpers = { path = "../subsystem-test-helpers" }
env_logger = "0.9.0"
log = "0.4.17"
assert_matches = "1.5.0"
tempfile = "3.2"

[features]
default = ["db", "full-node", "polkadot-native"]

db = [
	"service/rocksdb"
]

full-node = [
	"polkadot-node-core-av-store",
	"polkadot-node-core-approval-voting",
	"polkadot-availability-bitfield-distribution",
	"polkadot-availability-distribution",
	"polkadot-availability-recovery",
	"polkadot-client",
	"polkadot-collator-protocol",
	"polkadot-dispute-distribution",
	"polkadot-gossip-support",
	"polkadot-network-bridge",
	"polkadot-node-collation-generation",
	"polkadot-node-core-backing",
	"polkadot-node-core-bitfield-signing",
	"polkadot-node-core-candidate-validation",
	"polkadot-node-core-chain-api",
	"polkadot-node-core-chain-selection",
	"polkadot-node-core-dispute-coordinator",
	"polkadot-node-core-provisioner",
	"polkadot-node-core-runtime-api",
	"polkadot-statement-distribution",
	"polkadot-approval-distribution",
	"polkadot-node-core-pvf-checker",
	"kvdb-rocksdb",
	"parity-db",
]

# Configure the native runtimes to use. Polkadot is enabled by default.
#
# Validators require the native runtime currently
polkadot-native = [ "polkadot-runtime", "polkadot-runtime-constants", "polkadot-client/polkadot" ]
kusama-native = [ "kusama-runtime", "kusama-runtime-constants", "polkadot-client/kusama" ]
westend-native = [ "westend-runtime", "westend-runtime-constants", "polkadot-client/westend" ]
rococo-native = [ "rococo-runtime", "rococo-runtime-constants", "polkadot-client/rococo" ]

runtime-benchmarks = [
	"polkadot-runtime?/runtime-benchmarks",
	"kusama-runtime?/runtime-benchmarks",
	"westend-runtime?/runtime-benchmarks",
	"rococo-runtime?/runtime-benchmarks",

	"service/runtime-benchmarks",
]
try-runtime = [
	"polkadot-runtime?/try-runtime",
	"kusama-runtime?/try-runtime",
	"westend-runtime?/try-runtime",
	"rococo-runtime?/try-runtime",
]
fast-runtime = [
	"polkadot-runtime?/fast-runtime",
	"kusama-runtime?/fast-runtime",
	"westend-runtime?/fast-runtime",
	"rococo-runtime?/fast-runtime",
]

malus = ["full-node"]
runtime-metrics = [
	"polkadot-client/runtime-metrics",
	"rococo-runtime?/runtime-metrics",
	"westend-runtime?/runtime-metrics",
	"kusama-runtime?/runtime-metrics",
	"polkadot-runtime?/runtime-metrics",
	"polkadot-runtime-parachains/runtime-metrics"
]
