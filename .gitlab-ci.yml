# .gitlab-ci.yml
#
# polkadot
#
# Pipelines can be triggered manually in the web.
#
# Please do not add new jobs without "rules:" and "*-env". There are &test-refs for everything,
# "docker-env" is used for Rust jobs.
# And "kubernetes-env" for everything else. Please mention "image:" container name to be used
# with it, as there's no default one.

# All jobs are sorted according to their duration using DAG mechanism
# Currently, test-linux-stable job is the longest one and other jobs are
# sorted in order to complete during this job and occupy less runners in one
# moment of time.

stages:
  - check
  - test
  - build
  - publish
  - stage1
  - stage2
  - stage3
  - stage4
  - zombienet
  - short-benchmarks

workflow:
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH

variables:
  GIT_STRATEGY:                    fetch
  GIT_DEPTH:                       100
  CI_SERVER_NAME:                  "GitLab CI"
  CI_IMAGE:                        "paritytech/ci-linux:production"
  DOCKER_OS:                       "debian:stretch"
  ARCH:                            "x86_64"
  ZOMBIENET_IMAGE:                 "docker.io/paritytech/zombienet:v1.2.67"
  PIPELINE_SCRIPTS_TAG:            "v0.4"

default:
  cache:                           {}

.collect-artifacts:                &collect-artifacts
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     7 days
    paths:
      - ./artifacts/

.collect-artifacts-short:          &collect-artifacts-short
  artifacts:
    name:                          "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    when:                          on_success
    expire_in:                     1 days
    paths:
      - ./artifacts/

# collecting vars for pipeline stopper
# they will be used if the job fails
.pipeline-stopper-vars:
  before_script:
    - echo "FAILED_JOB_URL=${CI_JOB_URL}" > pipeline-stopper.env
    - echo "FAILED_JOB_NAME=${CI_JOB_NAME}" >> pipeline-stopper.env
    - echo "FAILED_JOB_NAME=${CI_JOB_NAME}" >> pipeline-stopper.env
    - echo "PR_NUM=${CI_COMMIT_REF_NAME}" >> pipeline-stopper.env

.pipeline-stopper-artifacts:
  artifacts:
     reports:
       dotenv: pipeline-stopper.env

.kubernetes-env:                   &kubernetes-env
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible:                   true
  tags:
    - kubernetes-parity-build

.docker-env:                       &docker-env
  image:                           "${CI_IMAGE}"
  retry:
    max: 2
    when:
      - runner_system_failure
      - unknown_failure
      - api_failure
  interruptible:                   true
  tags:
    - linux-docker

.compiler-info:                    &compiler-info
  before_script:
    - rustup show
    - cargo --version
    - sccache -s

.test-refs:                        &test-refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.common-refs:                      &common-refs
  # these jobs run always*
  rules:
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/              # i.e. v1.0, v2.1rc1
    - if: $CI_COMMIT_REF_NAME =~ /^release-v[0-9]+\.[0-9]+.*$/      # i.e. release-v0.9.27

.test-pr-refs:                     &test-pr-refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.zombienet-refs:                   &zombienet-refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: never
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs

.deploy-testnet-refs:              &deploy-testnet-refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"

.publish-refs:                     &publish-refs
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_PIPELINE_SOURCE == "web" &&
          $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/              # i.e. v1.0, v2.1rc1

.build-push-image:                 &build-push-image
  <<:                              *kubernetes-env
  image:                           quay.io/buildah/stable
  variables:                       &image-variables
    GIT_STRATEGY:                  none
    DOCKER_USER:                   ${PARITYPR_USER}
    DOCKER_PASS:                   ${PARITYPR_PASS}
  before_script:                   &check-versions
    - test -s ./artifacts/VERSION || exit 1
    - test -s ./artifacts/EXTRATAG || exit 1
    - VERSION="$(cat ./artifacts/VERSION)"
    - EXTRATAG="$(cat ./artifacts/EXTRATAG)"
    - echo "Polkadot version = ${VERSION} (EXTRATAG = ${EXTRATAG})"
  script:
    - test "$DOCKER_USER" -a "$DOCKER_PASS" ||
        ( echo "no docker credentials provided"; exit 1 )
    - cd ./artifacts
    - buildah bud
        --format=docker
        --build-arg VCS_REF="${CI_COMMIT_SHA}"
        --build-arg BUILD_DATE="$(date -u '+%Y-%m-%dT%H:%M:%SZ')"
        --build-arg IMAGE_NAME="${IMAGE_NAME}"
        --tag "$IMAGE_NAME:$VERSION"
        --tag "$IMAGE_NAME:$EXTRATAG"
        --file ${DOCKERFILE} .
    # The job will success only on the protected branch
    - echo "$DOCKER_PASS" |
        buildah login --username "$DOCKER_USER" --password-stdin docker.io
    - buildah info
    - buildah push --format=v2s2 "$IMAGE_NAME:$VERSION"
    - buildah push --format=v2s2 "$IMAGE_NAME:$EXTRATAG"
  after_script:
    - buildah logout --all

#### stage:                        stage2

check-transaction-versions:
  stage:                           stage2
  <<:                              *test-refs
  <<:                              *docker-env
  image:                           node:15
  needs:
    - job:                         build-linux-stable
      artifacts:                   true
  before_script:
    - apt-get -y update; apt-get -y install jq lsof
    - npm install --ignore-scripts -g @polkadot/metadata-cmp
    # Set git config
    - git config remote.origin.url "https://github.com/paritytech/polkadot.git"
    - git fetch origin release
  script:
    - ./scripts/ci/gitlab/check_extrinsics_ordering.sh


# This image is used in testnets
# Release image is handled by the Github Action here:
# .github/workflows/publish-docker-release.yml
publish-polkadot-debug-image:
  stage:                           stage2
  <<:                              *build-push-image
  rules:
    # Don't run when triggered from another pipeline
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web"
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs
    - if: $CI_COMMIT_REF_NAME =~ /^v[0-9]+\.[0-9]+.*$/              # i.e. v1.0, v2.1rc1
  variables:
    <<:                            *image-variables
    # scripts/ci/dockerfiles/polkadot_injected_debug.Dockerfile
    DOCKERFILE:                    ci/dockerfiles/polkadot_injected_debug.Dockerfile
    IMAGE_NAME:                    docker.io/paritypr/polkadot-debug
  needs:
    - job:                         build-linux-stable
      artifacts:                   true
  after_script:
    # pass artifacts to the zombienet-tests job
    # https://docs.gitlab.com/ee/ci/multi_project_pipelines.html#with-variable-inheritance
    - echo "PARACHAINS_IMAGE_NAME=${IMAGE_NAME}" > ./artifacts/parachains.env
    - echo "PARACHAINS_IMAGE_TAG=$(cat ./artifacts/EXTRATAG)" >> ./artifacts/parachains.env
  artifacts:
    reports:
      # this artifact is used in zombienet-tests job
      dotenv: ./artifacts/parachains.env
    expire_in:                     1 days

publish-test-collators-image:
  # service image for Simnet
  stage:                           stage2
  <<:                              *build-push-image
  <<:                              *zombienet-refs
  variables:
    <<:                            *image-variables
    # scripts/ci/dockerfiles/collator_injected.Dockerfile
    DOCKERFILE:                    ci/dockerfiles/collator_injected.Dockerfile
    IMAGE_NAME:                    docker.io/paritypr/colander
  needs:
    - job:                         build-test-collators
      artifacts:                   true
  after_script:
    - buildah logout --all
    # pass artifacts to the zombienet-tests job
    - echo "COLLATOR_IMAGE_NAME=${IMAGE_NAME}" > ./artifacts/collator.env
    - echo "COLLATOR_IMAGE_TAG=$(cat ./artifacts/EXTRATAG)" >> ./artifacts/collator.env
  artifacts:
    reports:
      # this artifact is used in zombienet-tests job
      dotenv: ./artifacts/collator.env

publish-malus-image:
  # service image for Simnet
  stage:                           stage2
  <<:                              *build-push-image
  <<:                              *zombienet-refs
  variables:
    <<:                            *image-variables
    # scripts/ci/dockerfiles/malus_injected.Dockerfile
    DOCKERFILE:                    ci/dockerfiles/malus_injected.Dockerfile
    IMAGE_NAME:                    docker.io/paritypr/malus
  needs:
    - job:                         build-malus
      artifacts:                   true
  after_script:
    - buildah logout "$IMAGE_NAME"
    # pass artifacts to the zombienet-tests job
    - echo "MALUS_IMAGE_NAME=${IMAGE_NAME}" > ./artifacts/malus.env
    - echo "MALUS_IMAGE_TAG=$(cat ./artifacts/EXTRATAG)" >> ./artifacts/malus.env
  artifacts:
    reports:
      # this artifact is used in zombienet-tests job
      dotenv: ./artifacts/malus.env

publish-staking-miner-image:
  stage:                           stage2
  <<:                              *build-push-image
  <<:                              *publish-refs
  variables:
    <<:                            *image-variables
    # scripts/ci/dockerfiles/staking-miner/staking-miner_injected.Dockerfile
    DOCKERFILE:                    ci/dockerfiles/staking-miner/staking-miner_injected.Dockerfile
    IMAGE_NAME:                    docker.io/paritytech/staking-miner
    GIT_STRATEGY:                  none
    DOCKER_USER:                   ${Docker_Hub_User_Parity}
    DOCKER_PASS:                   ${Docker_Hub_Pass_Parity}
  needs:
    - job:                         build-staking-miner
      artifacts:                   true


publish-s3-release:                &publish-s3
  stage:                           stage3
  needs:
    - job:                         build-linux-stable
      artifacts:                   true
  <<:                              *kubernetes-env
  image:                           paritytech/awscli:latest
  variables:
    GIT_STRATEGY:                  none
    PREFIX:                        "builds/polkadot/${ARCH}-${DOCKER_OS}"
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    # publishing binaries nightly
    - if: $CI_PIPELINE_SOURCE == "schedule"
  before_script:
    - *check-versions
  script:
    - echo "uploading objects to https://releases.parity.io/${PREFIX}/${VERSION}"
    - aws s3 sync --acl public-read ./artifacts/ s3://${AWS_BUCKET}/${PREFIX}/${VERSION}/
    - echo "update objects at https://releases.parity.io/${PREFIX}/${EXTRATAG}"
    - find ./artifacts -type f | while read file; do
        name="${file#./artifacts/}";
        aws s3api copy-object
          --copy-source ${AWS_BUCKET}/${PREFIX}/${VERSION}/${name}
          --bucket ${AWS_BUCKET} --key ${PREFIX}/${EXTRATAG}/${name};
      done
    - |
      cat <<-EOM
      |
      |  polkadot binary paths:
      |
      |  - https://releases.parity.io/${PREFIX}/${EXTRATAG}/polkadot
      |  - https://releases.parity.io/${PREFIX}/${VERSION}/polkadot
      |
      EOM
  after_script:
    - aws s3 ls s3://${AWS_BUCKET}/${PREFIX}/${EXTRATAG}/
        --recursive --human-readable --summarize

update_polkadot_weights:           &update-weights
  stage:                           stage2
  timeout:                         1d
  when:                            manual
  variables:
    RUNTIME:                       polkadot
  artifacts:
    paths:
      - ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  script:
    - ./scripts/ci/run_benches_for_runtime.sh $RUNTIME
    - git diff -P > ${RUNTIME}_weights_${CI_COMMIT_SHORT_SHA}.patch
  # uses the "shell" executors
  tags:
    - weights

update_kusama_weights:
  <<:                              *update-weights
  variables:
    RUNTIME:                       kusama

update_westend_weights:
  <<:                              *update-weights
  variables:
    RUNTIME:                       westend

update_rococo_weights:
  <<:                              *update-weights
  variables:
    RUNTIME:                       rococo

#### stage:                        stage3


deploy-parity-testnet:
  stage:                           stage3
  # this is an artificial job dependency, for pipeline optimization using GitLab's DAGs
  needs:
    - job:                         test-deterministic-wasm
      artifacts:                   false
  <<:                              *deploy-testnet-refs
  variables:
    POLKADOT_CI_COMMIT_NAME:       "${CI_COMMIT_REF_NAME}"
    POLKADOT_CI_COMMIT_REF:        "${CI_COMMIT_SHORT_SHA}"
  allow_failure:                   false
  trigger:                         "parity/infrastructure/parity-testnet"

include:
  # check jobs
  - scripts/ci/gitlab/pipeline/check.yml
  # test jobs
  - scripts/ci/gitlab/pipeline/test.yml
  # build jobs
  - scripts/ci/gitlab/pipeline/build.yml
  # short-benchmarks jobs
  - scripts/ci/gitlab/pipeline/short-benchmarks.yml
  # zombienet jobs
  - scripts/ci/gitlab/pipeline/zombienet.yml

#### stage:                        stage4

publish-rustdoc:
  stage:                           stage4
  <<:                              *kubernetes-env
  image:                           paritytech/tools:latest
  variables:
    GIT_DEPTH:                     100
  rules:
    - if: $CI_PIPELINE_SOURCE == "pipeline"
      when: never
    - if: $CI_PIPELINE_SOURCE == "web" && $CI_COMMIT_REF_NAME == "master"
    - if: $CI_COMMIT_REF_NAME == "master"
  # `needs:` can be removed after CI image gets nonroot. In this case `needs:` stops other
  # artifacts from being dowloaded by this job.
  needs:
    - job:                         build-rustdoc
      artifacts:                   true
    - job:                         build-implementers-guide
      artifacts:                   true
  script:
    # Save README and docs
    - cp -r ./crate-docs/ /tmp/doc/
    - cp -r ./artifacts/book/ /tmp/
    # setup ssh
    - eval $(ssh-agent)
    - ssh-add - <<< ${GITHUB_SSH_PRIV_KEY}
    - mkdir ~/.ssh && touch ~/.ssh/known_hosts
    - ssh-keyscan -t rsa github.com >> ~/.ssh/known_hosts
    # Set git config
    - git config user.email "devops-team@parity.io"
    - git config user.name "${GITHUB_USER}"
    - git config remote.origin.url "git@github.com:/paritytech/${CI_PROJECT_NAME}.git"
    - git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
    - git fetch origin gh-pages
    - git checkout gh-pages
    # Remove everything and restore generated docs and README
    - cp index.html /tmp
    - cp README.md /tmp
    - rm -rf ./*
    # dir for rustdoc
    - mkdir -p doc
    # dir for implementors guide
    - mkdir -p book
    - mv /tmp/doc/* doc/
    - mv /tmp/book/html/* book/
    - mv /tmp/index.html .
    - mv /tmp/README.md .
    # Upload files
    - git add --all --force
    # `git commit` has an exit code of > 0 if there is nothing to commit.
    # This causes GitLab to exit immediately and marks this job failed.
    # We don't want to mark the entire job failed if there's nothing to
    # publish though, hence the `|| true`.
    - git commit -m "Updated docs for ${CI_COMMIT_REF_NAME}" ||
        echo "___Nothing to commit___"
    - git push origin gh-pages --force
    - echo "___Rustdoc was successfully published to https://paritytech.github.io/polkadot/___"
  after_script:
    - rm -rf .git/ ./*



#### stage:                        .post

# This job cancels the whole pipeline if any of provided jobs fail.
# In a DAG, every jobs chain is executed independently of others. The `fail_fast` principle suggests
# to fail the pipeline as soon as possible to shorten the feedback loop.
.cancel-pipeline-template:
  stage:                           .post
  rules:
    - if: $CI_COMMIT_REF_NAME =~ /^[0-9]+$/                         # PRs
      when: on_failure
  variables:
    PROJECT_ID:                    "${CI_PROJECT_ID}"
    PROJECT_NAME:                  "${CI_PROJECT_NAME}"
    PIPELINE_ID:                   "${CI_PIPELINE_ID}"
    FAILED_JOB_URL:                "${FAILED_JOB_URL}"
    FAILED_JOB_NAME:               "${FAILED_JOB_NAME}"
    PR_NUM:                        "${PR_NUM}"
  trigger:
    project:                       "parity/infrastructure/ci_cd/pipeline-stopper"

cancel-pipeline-test-linux-stable:
  extends:                         .cancel-pipeline-template
  needs:
    - job:                         test-linux-stable

