// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_balances`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-01-11, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm4`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("rococo-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=rococo-dev
// --steps=50
// --repeat=20
// --pallet=pallet_balances
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/rococo/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_balances`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_balances::WeightInfo for WeightInfo<T> {
	// Storage: NisCounterpartBalances Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	// Storage: NisCounterpartBalances TotalIssuance (r:1 w:1)
	fn transfer() -> Weight {
		// Minimum execution time: 43_415 nanoseconds.
		Weight::from_ref_time(44_821_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: NisCounterpartBalances Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn transfer_keep_alive() -> Weight {
		// Minimum execution time: 31_764 nanoseconds.
		Weight::from_ref_time(32_495_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NisCounterpartBalances Account (r:1 w:1)
	// Storage: NisCounterpartBalances TotalIssuance (r:1 w:1)
	fn set_balance_creating() -> Weight {
		// Minimum execution time: 21_678 nanoseconds.
		Weight::from_ref_time(22_274_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: NisCounterpartBalances Account (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: NisCounterpartBalances TotalIssuance (r:1 w:1)
	fn set_balance_killing() -> Weight {
		// Minimum execution time: 29_206 nanoseconds.
		Weight::from_ref_time(30_503_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NisCounterpartBalances Account (r:2 w:2)
	// Storage: System Account (r:2 w:2)
	// Storage: NisCounterpartBalances TotalIssuance (r:1 w:1)
	fn force_transfer() -> Weight {
		// Minimum execution time: 42_420 nanoseconds.
		Weight::from_ref_time(43_141_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(5))
	}
	// Storage: NisCounterpartBalances Account (r:2 w:2)
	// Storage: System Account (r:1 w:1)
	fn transfer_all() -> Weight {
		// Minimum execution time: 40_181 nanoseconds.
		Weight::from_ref_time(40_696_000)
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: NisCounterpartBalances Account (r:1 w:1)
	fn force_unreserve() -> Weight {
		// Minimum execution time: 20_052 nanoseconds.
		Weight::from_ref_time(20_627_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}
