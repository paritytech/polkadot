// Copyright 2017-2022 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for `pallet_ranked_collective`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-11-16, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! HOSTNAME: `bm5`, CPU: `Intel(R) Core(TM) i7-7700K CPU @ 4.20GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 1024

// Executed Command:
// ./target/production/polkadot
// benchmark
// pallet
// --chain=kusama-dev
// --steps=50
// --repeat=20
// --pallet=pallet_ranked_collective
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_ranked_collective`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_ranked_collective::WeightInfo for WeightInfo<T> {
	// Storage: FellowshipCollective Members (r:1 w:1)
	// Storage: FellowshipCollective MemberCount (r:1 w:1)
	// Storage: FellowshipCollective IndexToId (r:0 w:1)
	// Storage: FellowshipCollective IdToIndex (r:0 w:1)
	fn add_member() -> Weight {
		// Minimum execution time: 20_091 nanoseconds.
		Weight::from_ref_time(20_793_000 as u64)
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: FellowshipCollective Members (r:1 w:1)
	// Storage: FellowshipCollective MemberCount (r:1 w:1)
	// Storage: FellowshipCollective IdToIndex (r:1 w:1)
	// Storage: FellowshipCollective IndexToId (r:1 w:1)
	/// The range of component `r` is `[0, 10]`.
	fn remove_member(r: u32, ) -> Weight {
		// Minimum execution time: 31_411 nanoseconds.
		Weight::from_ref_time(33_650_900 as u64)
			// Standard Error: 20_315
			.saturating_add(Weight::from_ref_time(9_742_136 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(r as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((3 as u64).saturating_mul(r as u64)))
	}
	// Storage: FellowshipCollective Members (r:1 w:1)
	// Storage: FellowshipCollective MemberCount (r:1 w:1)
	// Storage: FellowshipCollective IndexToId (r:0 w:1)
	// Storage: FellowshipCollective IdToIndex (r:0 w:1)
	/// The range of component `r` is `[0, 10]`.
	fn promote_member(r: u32, ) -> Weight {
		// Minimum execution time: 22_519 nanoseconds.
		Weight::from_ref_time(24_202_495 as u64)
			// Standard Error: 9_707
			.saturating_add(Weight::from_ref_time(404_053 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: FellowshipCollective Members (r:1 w:1)
	// Storage: FellowshipCollective MemberCount (r:1 w:1)
	// Storage: FellowshipCollective IdToIndex (r:1 w:1)
	// Storage: FellowshipCollective IndexToId (r:1 w:1)
	/// The range of component `r` is `[0, 10]`.
	fn demote_member(r: u32, ) -> Weight {
		// Minimum execution time: 30_958 nanoseconds.
		Weight::from_ref_time(34_019_871 as u64)
			// Standard Error: 15_923
			.saturating_add(Weight::from_ref_time(594_745 as u64).saturating_mul(r as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: FellowshipCollective Members (r:1 w:0)
	// Storage: FellowshipReferenda ReferendumInfoFor (r:1 w:1)
	// Storage: FellowshipCollective Voting (r:1 w:1)
	// Storage: Scheduler Agenda (r:2 w:2)
	fn vote() -> Weight {
		// Minimum execution time: 46_000 nanoseconds.
		Weight::from_ref_time(46_496_000 as u64)
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: FellowshipReferenda ReferendumInfoFor (r:1 w:0)
	// Storage: FellowshipCollective VotingCleanup (r:1 w:0)
	// Storage: FellowshipCollective Voting (r:0 w:2)
	/// The range of component `n` is `[0, 100]`.
	fn cleanup_poll(n: u32, ) -> Weight {
		// Minimum execution time: 14_684 nanoseconds.
		Weight::from_ref_time(18_793_742 as u64)
			// Standard Error: 1_475
			.saturating_add(Weight::from_ref_time(908_456 as u64).saturating_mul(n as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(n as u64)))
	}
}
