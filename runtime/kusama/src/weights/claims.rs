// Copyright 2017-2020 Parity Technologies (UK) Ltd.
// This file is part of Polkadot.

// Polkadot is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Polkadot is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Polkadot.  If not, see <http://www.gnu.org/licenses/>.
//! Autogenerated weights for claims
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 2.0.0
//! DATE: 2020-12-09, STEPS: [50, ], REPEAT: 20, LOW RANGE: [], HIGH RANGE: []
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kusama-dev"), DB CACHE: 128

// Executed Command:
// target/release/polkadot
// benchmark
// --chain=kusama-dev
// --steps=50
// --repeat=20
// --pallet=claims
// --extrinsic=*
// --execution=wasm
// --wasm-execution=compiled
// --heap-pages=4096
// --header=./file_header.txt
// --output=./runtime/kusama/src/weights/


#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for claims.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> claims::WeightInfo for WeightInfo<T> {
	fn claim(_u: u32, ) -> Weight {
		(294_235_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn mint_claim(_c: u32, ) -> Weight {
		(17_147_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn claim_attest(_u: u32, ) -> Weight {
		(297_705_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(7 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	fn attest(_u: u32, ) -> Weight {
		(142_818_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(8 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	fn validate_unsigned_claim(_c: u32, ) -> Weight {
		(174_987_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	fn validate_unsigned_claim_attest(_c: u32, ) -> Weight {
		(177_420_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	fn validate_prevalidate_attests(_c: u32, ) -> Weight {
		(13_308_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
	}
	fn keccak256(i: u32, ) -> Weight {
		(4_390_000 as Weight)
			// Standard Error: 0
			.saturating_add((812_000 as Weight).saturating_mul(i as Weight))
	}
	fn eth_recover(i: u32, ) -> Weight {
		(26_985_000 as Weight)
			// Standard Error: 104_000
			.saturating_add((156_915_000 as Weight).saturating_mul(i as Weight))
	}
}
